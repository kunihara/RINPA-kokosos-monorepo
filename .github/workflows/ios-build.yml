name: iOS Build (Dev/Stage/Prod)

on:
  push:
    branches: [dev, stage, main]
  pull_request:

jobs:
  build-ios:
    name: iOS Build (${{ matrix.env_name }})
    runs-on: macos-latest
    strategy:
      matrix:
        include:
          - env_name: dev
            cfg_suffix: Dev
          - env_name: stage
            cfg_suffix: Stage
          - env_name: prod
            cfg_suffix: Prod
    environment: ${{ matrix.env_name }}
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install XcodeGen
        run: |
          set -euo pipefail
          brew update
          brew install xcodegen

      - name: Write iOS Secrets xcconfig (matrix=${{ matrix.cfg_suffix }})
        working-directory: apps/ios
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          OAUTH_REDIRECT_SCHEME: ${{ secrets.OAUTH_REDIRECT_SCHEME || 'kokosos' }}
        run: |
          set -euo pipefail
          CFG=${{ matrix.cfg_suffix }}
          FILE="Configs/Secrets-${CFG}.xcconfig"
          : "${SUPABASE_URL:?Missing SUPABASE_URL secret for environment ${{ matrix.env_name }}}"
          : "${SUPABASE_ANON_KEY:?Missing SUPABASE_ANON_KEY secret for environment ${{ matrix.env_name }}}"
          echo "Writing $FILE"
          {
            printf 'SUPABASE_URL = %s\n' "$SUPABASE_URL"
            printf 'SUPABASE_ANON_KEY = %s\n' "$SUPABASE_ANON_KEY"
            printf 'OAUTH_REDIRECT_SCHEME = %s\n' "$OAUTH_REDIRECT_SCHEME"
          } > "$FILE"

      - name: Generate Xcode project
        working-directory: apps/ios
        run: xcodegen generate

      - name: Show available destinations (debug)
        working-directory: apps/ios
        run: |
          set -euo pipefail
          xcodebuild -project KokoSOS.xcodeproj \
            -scheme KokoSOS -configuration Debug-${{ matrix.cfg_suffix }} \
            -showsdks || true
          xcodebuild -project KokoSOS.xcodeproj \
            -scheme KokoSOS -configuration Debug-${{ matrix.cfg_suffix }} \
            -showdestinations || true

      - name: Prepare Simulator (create/boot iPhone 15)
        working-directory: apps/ios
        run: |
          set -euo pipefail
          # Pick the latest available iOS runtime (last line tends to be the newest)
          RUNTIME_ID=$(xcrun simctl list runtimes | awk '/iOS [0-9]/{print $NF}' | tail -n1)
          echo "Using runtime: ${RUNTIME_ID}"
          # Create device if missing
          if ! xcrun simctl list devices | grep -q "KokoSOS-CI"; then
            xcrun simctl create "KokoSOS-CI" "iPhone 15" "$RUNTIME_ID" || true
          fi
          # Boot (ignore if already booted)
          xcrun simctl boot "KokoSOS-CI" || true
          xcrun simctl list devices | grep -A2 "KokoSOS-CI" || true
          # Export UDID for xcodebuild destination by id (avoids OS mismatch)
          SIM_UDID=$(xcrun simctl list devices | awk -F'[()]' '/KokoSOS-CI/{print $2; exit}')
          echo "SIM_UDID=${SIM_UDID}" >> "$GITHUB_ENV"

      - name: Build (Simulator, Debug-${{ matrix.cfg_suffix }})
        working-directory: apps/ios
        run: |
          set -euo pipefail
          xcodebuild -project KokoSOS.xcodeproj \
            -scheme KokoSOS -configuration Debug-${{ matrix.cfg_suffix }} \
            -sdk iphonesimulator \
            -destination "id=${SIM_UDID}" \
            build | xcpretty || exit ${PIPESTATUS[0]}
