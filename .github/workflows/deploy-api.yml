name: Deploy API (Cloudflare Workers)

on:
  push:
    branches: [dev, stage, main]
    paths:
      - 'apps/api-worker/**'
      - '.github/workflows/deploy-api.yml'
  pull_request:
    paths:
      - 'apps/api-worker/**'
      - '.github/workflows/deploy-api.yml'
  workflow_dispatch:

jobs:
  changes:
    name: Detect changed scopes
    runs-on: ubuntu-latest
    outputs:
      api: ${{ steps.filter.outputs.api }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            api:
              - 'apps/api-worker/**'
              - '.github/workflows/deploy-api.yml'

  deploy:
    name: Deploy Workers
    needs: changes
    if: ${{ github.event_name == 'workflow_dispatch' || needs.changes.outputs.api == 'true' }}
    runs-on: ubuntu-latest
    concurrency:
      group: api-${{ github.ref }}
      cancel-in-progress: true
    environment: ${{ github.ref_name == 'main' && 'prod' || github.ref_name == 'stage' && 'stage' || 'dev' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Wrangler (CLI)
        run: npm i -g wrangler@4.40.3

      - name: Validate Cloudflare token (stage/dev/prod)
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          set -euo pipefail
          LEN=$(printf %s "$CLOUDFLARE_API_TOKEN" | wc -c)
          CODE=$(curl -sS -o /dev/null -w "%{http_code}" \
            -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
            https://api.cloudflare.com/client/v4/user/tokens/verify || true)
          echo "CF_TOKEN_LEN=$LEN"
          echo "CF_TOKEN_VERIFY_CODE=$CODE"
          if [ "$LEN" -lt 10 ] || [ "$CODE" != "200" ]; then
            echo "::error ::Cloudflare token appears invalid or missing. Ensure stage Environment approval and Secrets (CLOUDFLARE_API_TOKEN / CLOUDFLARE_ACCOUNT_ID)." >&2
            exit 1
          fi

      - name: Deploy (dev)
        if: ${{ github.ref_name == 'dev' }}
        working-directory: apps/api-worker
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          CORS_ALLOW_ORIGIN: ${{ secrets.CORS_ALLOW_ORIGIN }}
          WEB_PUBLIC_BASE: ${{ secrets.WEB_PUBLIC_BASE }}
          EMAIL_PROVIDER: ${{ secrets.EMAIL_PROVIDER }}
          SES_REGION: ${{ secrets.SES_REGION }}
          SES_ACCESS_KEY_ID: ${{ secrets.SES_ACCESS_KEY_ID }}
          SES_SECRET_ACCESS_KEY: ${{ secrets.SES_SECRET_ACCESS_KEY }}
          SES_SENDER_EMAIL: ${{ secrets.SES_SENDER_EMAIL }}
        run: |
          set -euo pipefail
          echo "CF_TOKEN_LEN=$(printf %s "$CLOUDFLARE_API_TOKEN" | wc -c)"
          CF_TOKEN_VERIFY_CODE=$(curl -sS -o /dev/null -w "%{http_code}" \
            -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
            https://api.cloudflare.com/client/v4/user/tokens/verify || true)
          echo "CF_TOKEN_VERIFY_CODE=$CF_TOKEN_VERIFY_CODE"
          wrangler whoami
          wrangler deploy --env dev
          [ -n "${JWT_SECRET:-}" ] && printf "%s" "$JWT_SECRET" | wrangler secret put JWT_SECRET --env dev
          [ -n "${SUPABASE_URL:-}" ] && printf "%s" "$SUPABASE_URL" | wrangler secret put SUPABASE_URL --env dev
          [ -n "${SUPABASE_SERVICE_ROLE_KEY:-}" ] && printf "%s" "$SUPABASE_SERVICE_ROLE_KEY" | wrangler secret put SUPABASE_SERVICE_ROLE_KEY --env dev
          [ -n "${CORS_ALLOW_ORIGIN:-}" ] && printf "%s" "$CORS_ALLOW_ORIGIN" | wrangler secret put CORS_ALLOW_ORIGIN --env dev
          [ -n "${WEB_PUBLIC_BASE:-}" ] && printf "%s" "$WEB_PUBLIC_BASE" | wrangler secret put WEB_PUBLIC_BASE --env dev
          [ -n "${EMAIL_PROVIDER:-}" ] && printf "%s" "$EMAIL_PROVIDER" | wrangler secret put EMAIL_PROVIDER --env dev
          [ -n "${SES_REGION:-}" ] && printf "%s" "$SES_REGION" | wrangler secret put SES_REGION --env dev
          [ -n "${SES_ACCESS_KEY_ID:-}" ] && printf "%s" "$SES_ACCESS_KEY_ID" | wrangler secret put SES_ACCESS_KEY_ID --env dev
          [ -n "${SES_SECRET_ACCESS_KEY:-}" ] && printf "%s" "$SES_SECRET_ACCESS_KEY" | wrangler secret put SES_SECRET_ACCESS_KEY --env dev
          [ -n "${SES_SENDER_EMAIL:-}" ] && printf "%s" "$SES_SENDER_EMAIL" | wrangler secret put SES_SENDER_EMAIL --env dev

      - name: Deploy (stage/prod)
        if: ${{ github.ref_name == 'stage' || github.ref_name == 'main' }}
        working-directory: apps/api-worker
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          CORS_ALLOW_ORIGIN: ${{ secrets.CORS_ALLOW_ORIGIN }}
          WEB_PUBLIC_BASE: ${{ secrets.WEB_PUBLIC_BASE }}
          EMAIL_PROVIDER: ${{ secrets.EMAIL_PROVIDER }}
          SES_REGION: ${{ secrets.SES_REGION }}
          SES_ACCESS_KEY_ID: ${{ secrets.SES_ACCESS_KEY_ID }}
          SES_SECRET_ACCESS_KEY: ${{ secrets.SES_SECRET_ACCESS_KEY }}
          SES_SENDER_EMAIL: ${{ secrets.SES_SENDER_EMAIL }}
        run: |
          set -euo pipefail
          echo "CF_TOKEN_LEN=$(printf %s "$CLOUDFLARE_API_TOKEN" | wc -c)"
          CF_TOKEN_VERIFY_CODE=$(curl -sS -o /dev/null -w "%{http_code}" \
            -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
            https://api.cloudflare.com/client/v4/user/tokens/verify || true)
          echo "CF_TOKEN_VERIFY_CODE=$CF_TOKEN_VERIFY_CODE"
          ENV_NAME=${{ github.ref_name == 'main' && 'prod' || 'stage' }}
          wrangler whoami
          wrangler deploy --env "$ENV_NAME"
          [ -n "${JWT_SECRET:-}" ] && printf "%s" "$JWT_SECRET" | wrangler secret put JWT_SECRET --env "$ENV_NAME"
          [ -n "${SUPABASE_URL:-}" ] && printf "%s" "$SUPABASE_URL" | wrangler secret put SUPABASE_URL --env "$ENV_NAME"
          [ -n "${SUPABASE_SERVICE_ROLE_KEY:-}" ] && printf "%s" "$SUPABASE_SERVICE_ROLE_KEY" | wrangler secret put SUPABASE_SERVICE_ROLE_KEY --env "$ENV_NAME"
          [ -n "${CORS_ALLOW_ORIGIN:-}" ] && printf "%s" "$CORS_ALLOW_ORIGIN" | wrangler secret put CORS_ALLOW_ORIGIN --env "$ENV_NAME"
          [ -n "${WEB_PUBLIC_BASE:-}" ] && printf "%s" "$WEB_PUBLIC_BASE" | wrangler secret put WEB_PUBLIC_BASE --env "$ENV_NAME"
          [ -n "${EMAIL_PROVIDER:-}" ] && printf "%s" "$EMAIL_PROVIDER" | wrangler secret put EMAIL_PROVIDER --env "$ENV_NAME"
          [ -n "${SES_REGION:-}" ] && printf "%s" "$SES_REGION" | wrangler secret put SES_REGION --env "$ENV_NAME"
          [ -n "${SES_ACCESS_KEY_ID:-}" ] && printf "%s" "$SES_ACCESS_KEY_ID" | wrangler secret put SES_ACCESS_KEY_ID --env "$ENV_NAME"
          [ -n "${SES_SECRET_ACCESS_KEY:-}" ] && printf "%s" "$SES_SECRET_ACCESS_KEY" | wrangler secret put SES_SECRET_ACCESS_KEY --env "$ENV_NAME"
          [ -n "${SES_SENDER_EMAIL:-}" ] && printf "%s" "$SES_SENDER_EMAIL" | wrangler secret put SES_SENDER_EMAIL --env "$ENV_NAME"
